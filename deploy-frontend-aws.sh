#!/bin/bash

echo "üöÄ Deploying Frontend to Production with AWS Backend"
echo "===================================================="
echo ""

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

AWS_BACKEND_URL="http://balekai-alb-new-626347040.us-east-1.elb.amazonaws.com"

echo -e "${BLUE}Step 1: Verifying AWS Backend Status${NC}"
echo "Checking ECS service status..."

# Check ECS service status
ECS_STATUS=$(aws ecs describe-services \
    --cluster balekai-cluster-new \
    --services balekai-service-new \
    --region us-east-1 \
    --query 'services[0].status' \
    --output text)

if [ "$ECS_STATUS" = "ACTIVE" ]; then
    echo -e "${GREEN}‚úÖ ECS service is ACTIVE${NC}"
else
    echo -e "${RED}‚ùå ECS service status: $ECS_STATUS${NC}"
    echo "Please ensure the backend is running before deploying frontend"
    exit 1
fi

echo ""
echo -e "${BLUE}Step 2: Frontend Configuration Verification${NC}"

# Check if frontend is configured for AWS
if grep -q "balekai-alb-new" frontend/app/utils/api.tsx; then
    echo -e "${GREEN}‚úÖ Frontend API configured for AWS backend${NC}"
else
    echo -e "${RED}‚ùå Frontend not configured for AWS backend${NC}"
    exit 1
fi

# Check production environment file
if [ -f "frontend/env.production" ]; then
    echo -e "${GREEN}‚úÖ Production environment file exists${NC}"
    echo "API URL: $(cat frontend/env.production)"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Production environment file not found${NC}"
fi

echo ""
echo -e "${BLUE}Step 3: Building Frontend for Production${NC}"
echo "Building Next.js application..."

cd frontend

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "Installing dependencies..."
    npm install
fi

# Build the application
echo "Building production bundle..."
npm run build

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Frontend build successful${NC}"
else
    echo -e "${RED}‚ùå Frontend build failed${NC}"
    exit 1
fi

cd ..

echo ""
echo -e "${BLUE}Step 4: Testing Frontend-AWS Backend Integration${NC}"

# Run the connection test
echo "Testing frontend-AWS backend integration..."
./test-frontend-aws-connection.sh

echo ""
echo -e "${BLUE}Step 5: Frontend Deployment Options${NC}"
echo ""
echo -e "${YELLOW}üéØ Choose your deployment method:${NC}"
echo ""
echo "1. üì¶ Deploy to Vercel (Recommended for Next.js)"
echo "   - Free hosting with automatic deployments"
echo "   - Built-in CI/CD from GitHub"
echo "   - Global CDN and edge functions"
echo ""
echo "2. üê≥ Deploy to AWS (ECS + S3 + CloudFront)"
echo "   - Full AWS integration"
echo "   - Custom domain and SSL"
echo "   - More control over infrastructure"
echo ""
echo "3. üöÄ Deploy to Netlify"
echo "   - Free hosting with Git integration"
echo "   - Easy custom domain setup"
echo "   - Good for static sites and SPAs"
echo ""
echo "4. üîß Manual deployment instructions"
echo "   - Build and serve locally"
echo "   - Deploy to any hosting provider"
echo ""

echo -e "${GREEN}üéâ Frontend is ready for production deployment!${NC}"
echo ""
echo "üìã Current Status:"
echo "‚úÖ Backend deployed and running on AWS ECS"
echo "‚úÖ Frontend configured to use AWS backend"
echo "‚úÖ All critical functionality tested and working"
echo "‚úÖ Production build completed successfully"
echo ""
echo "üîó AWS Backend URL: $AWS_BACKEND_URL"
echo "üì± Frontend build location: frontend/.next/"
echo ""
echo "üöÄ Next Steps:"
echo "1. Choose deployment method above"
echo "2. Deploy frontend to production"
echo "3. Test all functionality in production"
echo "4. Monitor for any issues"
echo ""
echo "üí° Recommendation: Start with Vercel for quick deployment,"
echo "   then migrate to AWS if you need full infrastructure control."
